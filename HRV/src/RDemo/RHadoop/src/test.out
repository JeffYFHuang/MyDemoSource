
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

>    source("HRVFUNS.R")
Loading required package: tcltk
Loading required package: tkrplot
Loading required package: waveslim

waveslim: Wavelet Method for 1/2/3D Signals (version = 1.7.5)

Loading required package: nonlinearTseries
Loading required package: Matrix
Loading required package: rgl
Loading required package: tseries
Loading required package: TSA
Loading required package: leaps
Loading required package: locfit
locfit 1.5-9.1 	 2013-03-22
Loading required package: mgcv
Loading required package: nlme
This is mgcv 1.8-13. For overview type 'help("mgcv-package")'.

Attaching package: ‘TSA’

The following objects are masked from ‘package:stats’:

    acf, arima

The following object is masked from ‘package:utils’:

    tar

Loading required package: Rcpp

Attaching package: ‘nonlinearTseries’

The following object is masked from ‘package:grDevices’:

    contourLines

Loading required package: rJava

HADOOP_CMD=/usr/local/hadoop/bin/hadoop

Be sure to run hdfs.init()
Warning messages:
1: no DISPLAY variable so Tk is not available 
2: loading Rplot failed 
3: In rgl.init(initValue, onlyNULL) : RGL: unable to open X11 display
4: 'rgl_init' failed, running with rgl.useNULL = TRUE 
> 
>    ##supply default values
>    startTime = 0
>    endTime = 0
>    size=300 #seconds
>    overlap = 0 #seconds: 0 -> non-overlap;
>    folder = "/HRVData/physiobank/"
>    #fileName = "example.beats"
>    #outputFileName = paste(fileName, ".hrv", sep="")
> 
>    ##First read in the arguments listed at the command line
>    args=(commandArgs(TRUE))
> 
>    ##args is now a list of character vectors
>    ## First check to see if arguments are passed.
>    ## Then cycle through each element of the list and evaluate the expressions.
>   
>    if(length(args) != 0){
+       for(i in 1:length(args)){
+         eval(parse(text=args[[i]]))
+       }
+    }
>   
>    #library(curl)
>    #filecon = curl("http://hadoop:50070/webhdfs/v1/HRVData/example.beats?op=OPEN") #"example.beats"
> 
>    # connect to hdfs file system to get beats file
>    hdfs.init()
16/08/25 09:23:45 WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
>    # hdfs.rm(paste(folder, "*.hrv", sep=""))
>    beatFiles = hdfs.ls(paste(folder, "*.beats", sep=""))
>    beatFiles = unlist(strsplit(beatFiles$file, folder))
>    beatFiles = beatFiles[grep(".beats", beatFiles)]
>    beatFiles = beatFiles[!beatFiles %in% c("b04.beats", "c01.beats", "c01er.beats", "c04.beats", "b05.beats", "x14.beats", "x17.beats", "x18.beats", "x24.beats", "x29.beats")]
>    for (fileName in beatFiles) {
+       if (!hdfs.exists(paste(folder, fileName, ".hrv", sep=""))) {
+          print(fileName)
+          beatsPath = paste(folder, fileName, sep="")
+          hdfsBeatsConn = textConnection(hdfs.read.text.file(beatsPath)) #connectHDFSBeatsFile(beatsPath)
+          HRVData = CreateHRVData()
+          HRVData = SetVerbose(HRVData, FALSE)
+          HRVData = LoadBeatAscii(HRVData, hdfsBeatsConn, RecordPath = ".")
+          features = getHRVFeatures(HRVData, startTime, endTime, size, overlap)
+ 
+          jsonData<-toJSON(features)
+ 
+          # write json data to hdfs
+          writeJsonToHDFS(jsonData, folder, paste(fileName, ".hrv", sep=""))
+       }
+    }
[1] "x30.beats"
There were 50 or more warnings (use warnings() to see the first 50)
> 
> proc.time()
   user  system elapsed 
 33.404  17.188  63.349 
