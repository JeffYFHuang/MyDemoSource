library(RHive)
rhive.init()
rhive.connect()
rhive.connect
rhive.connect(host="10.0.0.8")
rhive.connect(host="10.0.0.8")
q()
require(rjson)
con <- file("part-00000", open = "r")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line
)
names(data)
library(RHive)
require(RHive)
require(rjson)
master = "10.0.0.8"
user = "hduser"
passwd = "hduser"
rhive.init()
rhive.connect(master, user="hduser", password="hduser")
con <- file("part-00000", open = "r")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
fields = names(data)
rhive.exist.table()
rhive.exist.table
data
unlist(data)
as.numeric(unlist(data))
as.numeric(data)
create_tb = paste("CREATE TABLE ", tableName, "(", paste(fields[-28], "double", collapse=", "), ", ", fields[28], " int)", sep="")
tableName = "hivetest_hrv"
create_tb = paste("CREATE TABLE ", tableName, "(", paste(fields[-28], "double", collapse=", "), ", ", fields[28], " int)", sep="")
create_tb
create_tb = paste("CREATE TABLE ", tableName, " (", paste(fields[-28], "double", collapse=", "), ", ", fields[28], " int)", sep="")
create_tb
insertOneData = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste("(", fields, as.numeric(data), ")", collapse=","))
insertOneData
insertOneData = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste("(", as.numeric(data), ")", collapse=",", sep=""))
insertOneData
paste("INSERT INTO TABLE ", tableName, " VALUES (", paste(as.numeric(data), collapse=",", sep=""), ")", sep="")
paste("INSERT INTO TABLE ", tableName, " VALUES (", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
equire(RHive)
require(rjson)
master = "10.0.0.8"
user = "hduser"
passwd = "hduser"
rhive.init()
rhive.connect(master, user="hduser", password="hduser")
con <- file("part-00000", open = "r")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
fields = names(data)
tableName = "hivetest_hrv"
#create hrv table
if (!rhive.exist.table(tableName)) {
   create_tb = paste("CREATE TABLE ", tableName, "(", paste(fields[-28], "double", collapse=", "), ", ", fields[28], " int)", sep="")
   rhive.query(create_tb)
}
create_tb
tableName = "hivetest_hrv"
#create hrv table
if (!rhive.exist.table(tableName)) {
   create_tb = paste("CREATE TABLE ", tableName, " (", paste(fields[-28], "double", collapse=", "), ", ", fields[28], " int)", sep="")
   rhive.query(create_tb)
}
rhive.list.tables()
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES (", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
rhive.query(insert_data)
insert_data
rhive.exist.table(tableName)
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES (", paste(as.numeric(data), collapse=", ", sep=""), ");", sep="")
rhive.query(insert_data)
insert_data
CREATE TABLE students (name VARCHAR(64), age INT, gpa DECIMAL(3, 2))
  CLUSTERED BY (age) INTO 2 BUCKETS STORED AS ORC;
rhive.query("CREATE TABLE students (name VARCHAR(64), age INT, gpa DECIMAL(3, 2)) CLUSTERED BY (age) INTO 2 BUCKETS STORED AS ORC;")
rhive.query("CREATE TABLE students (name VARCHAR(64), age INT, gpa DECIMAL(3, 2)) CLUSTERED BY (age) INTO 2 BUCKETS STORED AS ORC")
rhive.query("CREATE TABLE students (name VARCHAR(64), age INT, gpa DECIMAL(3, 2))")
rhive.list.tables()
rhive.query("INSERT INTO TABLE students VALUES ('fred flintstone', 35, 1.28)")
rhive.query("SHOW tables")
rhive.save
rhive.desc.table(tableName)
rhive.load.table(tableName)
rhive.load.table("student")
rhive.list.tables()
rhive.load.table("students")
rhive.query("INSERT INTO TABLE students VALUES ('fred flintstone', 35, 1.28)")
rhive.load.table("students")
rhive.query("INSERT INTO TABLE students VALUES ('flintstone', 35, 1.28)")
rhive.load.table("students")
df =rhive.load.table("student")
df =rhive.load.table("students")
df
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES (", paste(as.numeric(data), collapse=", ", sep=""), ");", sep="")
rhive.query(insert_data)
df =rhive.load.table(tableName)
df
rhive.query(insert_data)
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES (", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
rhive.query(insert_data)
df =rhive.load.table(tableName)
df
paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
insert_data = c(insert_data, paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep=""))
insert_data
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(insert_data, collapse=", ", sep=""), sep="")
insert_data
insert_data =NULL
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(insert_data, collapse=", ", sep=""), sep="")
insert_data
con <- file("part-00000", open = "r")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
fields = names(data)
tableName = "hivetest_hrv"
#create hrv table
if (!rhive.exist.table(tableName)) {
   create_tb = paste("CREATE TABLE ", tableName, " (", paste(fields[-28], "double", collapse=", "), ", ", fields[28], " int)", sep="")
   rhive.query(create_tb)
}
insert_data = paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
insert_data
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
   insert_data = c(insert_data, paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep=""))
insert_data
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(insert_data, collapse=", ", sep=""), sep="")
insert_data
rhive.query(insert_data)
df =rhive.load.table(tableName)
df
ls
rhive.list.tables
rhive.list.tables()
rhive.rm
rhive.rm(tableName)
rhive.list.tables()
rhive.show.tables()
rhive.drop.table("students")
rhive.drop.table(tableName)
require(RHive)
require(rjson)
master = "10.0.0.8"
user = "hduser"
passwd = "hduser"
rhive.init()
rhive.connect(master, user="hduser", password="hduser")
con <- file("part-00000", open = "r")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
fields = names(data)
tableName = "hivetest_hrv"
#create hrv table
if (!rhive.exist.table(tableName)) {
   create_tb = paste("CREATE TABLE ", tableName, " (", paste(fields[-28], "double", collapse=", "), ", ", fields[28], " int)", sep="")
   rhive.query(create_tb)
}
insert_data = paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
   data = fromJSON(line)
   insert_data = c(insert_data, paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep=""))
}
rhive.list.tables()
rhive.drop.table("saurzcode")
insert_data
insert_data
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(insert_data, collapse=", ", sep=""), sep="")
rhive.query(insert_data)
insert_data
insert_data
values = paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
   data = fromJSON(line)
   values = c(values, paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep=""))
}
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(values, collapse=", ", sep=""), sep="")
values
insert_data
rhive.query(insert_data)
rhive.query
rhive.query(insert_data, limit=1)
con <- file("part-00000", open = "r")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
fields = names(data)
tableName = "hivetest_hrv"
#create hrv table
if (!rhive.exist.table(tableName)) {
   create_tb = paste("CREATE TABLE ", tableName, " (", paste(fields[-28], "double", collapse=", "), ", ", fields[28], " int)", sep="")
   rhive.query(create_tb)
}
values = paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
   data = fromJSON(line)
   values = c(values, paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep=""))
}
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(values, collapse=", ", sep=""), sep="")
rhive.query(insert_data)
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(values[1:10], collapse=", ", sep=""), sep="")
insert_data
rhive.query(insert_data)
df = rhive.load.table(tableName)
df
df = rhive.drop.table(tableName)
create_tb = paste("CREATE TABLE ", tableName, " (", paste(fields[-28], "string", collapse=", "), ", ", fields[28], " int)", sep="")
   rhive.query(create_tb)
rhive.desc.table(tableName)
rhive.query(insert_data)
df =rhive.load.table(tableName)
df
df = rhive.drop.table(tableName)
con <- file("part-00000", open = "r")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
fields = names(data)
tableName = "hivetest_hrv"
#create hrv table
if (!rhive.exist.table(tableName)) {
   create_tb = paste("CREATE TABLE ", tableName, " (", paste(fields[-28], "string", collapse=", "), ", ", fields[28], " int)", sep="")
   rhive.query(create_tb)
}
values = paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
   data = fromJSON(line)
   values = c(values, paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep=""))
}
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(values, collapse=", ", sep=""), sep="")
rhive.query(insert_data)
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(values[1:10], collapse=", ", sep=""), sep="")
rhive.query(insert_data)
df = rhive.drop.table(tableName)
con <- file("part-00000", open = "r")
line <- readLines(con, n = 1, warn = FALSE)
data = fromJSON(line)
fields = names(data)
tableName = "hivetest_hrv"
#create hrv table
if (!rhive.exist.table(tableName)) {
   create_tb = paste("CREATE TABLE ", tableName, " (", paste(fields[-28], "string", collapse=", "), ", ", fields[28], " int)", sep="")
   rhive.query(create_tb)
}
values = paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep="")
while (length(line <- readLines(con, n = 1, warn = FALSE)) > 0) {
   data = fromJSON(line)
   values = c(values, paste("(", paste(as.numeric(data), collapse=", ", sep=""), ")", sep=""))
}
insert_data = paste("INSERT INTO TABLE ", tableName, " VALUES ", paste(values, collapse=", ", sep=""), sep="")
rhive.query(insert_data)
sink("sqlcmd.txt")
insert_data
sink()
q()
